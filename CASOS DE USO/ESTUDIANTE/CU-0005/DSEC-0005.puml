@startuml
actor Estudiante
boundary "ReservarTurnoView" as View
control "EstudiantesController" as Controller
entity "Profesor" as Profesor
database "ReservasRepository" as Repository

== Flujo principal ==
Estudiante -> View : Acceder al perfil del profesor deseado
activate View
View -> Controller : Solicitar fechas y horas disponibles para la reserva
activate Controller
Controller -> Profesor : Solicitar fechas y horas disponibles para la reserva
activate Profesor
Profesor --> Controller : Fechas y horas disponibles
deactivate Profesor
Controller --> View : Mostrar fechas y horas disponibles para la reserva
deactivate Controller
View -> Controller : Enviar fecha y hora seleccionada
activate Controller
Controller -> Repository : Confirmar disponibilidad de la fecha y hora seleccionada
activate Repository
Repository --> Controller : Disponibilidad confirmada
deactivate Repository
Controller -> Repository : Registrar reserva
Repository --> Controller : Confirmación de reserva
deactivate Repository
Controller -> View : Mostrar confirmación de reserva
deactivate Controller

== Flujo alternativo ==
alt Horario no disponible
    Controller -> View : Mostrar mensaje de error
    activate View
    deactivate View
end

@enduml
